class Item:
    def __init__(self, name, weight, value):
        self.name = name
        self.weight = weight
        self.value = value

    def __repr__(self):
        return f"{self.name} (вес: {self.weight}, ценность: {self.value})"


class Knapsack:
    def __init__(self, max_weight):
        self.max_weight = max_weight
        self.current_weight = 0
        self.items = []

    def add_item(self, item):
        if self.current_weight + item.weight <= self.max_weight:
            self.items.append(item)
            self.current_weight += item.weight
        else:
            print(f"Невозможно добавить {item.name}: превышает максимальный вес.")

    def remove_item(self, item_name):
        for item in self.items:
            if item.name == item_name:
                self.items.remove(item)
                self.current_weight -= item.weight
                return
        print("Предмет не найден.")

    def display_contents(self):
        print("Текущие содержимое рюкзака:")
        for item in self.items:
            print(item)
        print(f"Текущий вес: {self.current_weight}/{self.max_weight}")


def knapsack_recursive(items, n, max_weight):
    if n == 0 or max_weight == 0:
        return 0

    if items[n - 1].weight > max_weight:
        return knapsack_recursive(items, n - 1, max_weight)

    return max(items[n - 1].value + knapsack_recursive(items, n - 1, max_weight - items[n - 1].weight),
               knapsack_recursive(items, n - 1, max_weight))


def knapsack_dp(items, n, max_weight):
    dp = [[0 for _ in range(max_weight + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, max_weight + 1):
            if items[i - 1].weight > w:
                dp[i][w] = dp[i - 1][w]
            else:
                dp[i][w] = max(dp[i - 1][w], items[i - 1].value + dp[i - 1][w - items[i - 1].weight])

    return dp[n][max_weight]


def greedy_by_weight(items, max_weight):
    items.sort(key=lambda x: x.weight, reverse=True)
    knapsack = Knapsack(max_weight)

    for item in items:
        knapsack.add_item(item)

    return knapsack


def greedy_by_value_per_weight(items, max_weight):
    items.sort(key=lambda x: x.value / x.weight, reverse=True)
    knapsack = Knapsack(max_weight)

    for item in items:
        knapsack.add_item(item)

    return knapsack


def main_menu():
    items = []
    knapsack = None

    while True:
        print("\nМеню:")
        print("1. Загрузить предметы из файла")
        print("2. Добавить предмет")
        print("3. Изменить предмет")
        print("4. Удалить предмет")
        print("5. Установить максимальный вес рюкзака")
        print("6. Посмотреть содержимое рюкзака")
        print("7. Выбрать метод решения")
        print("8. Сравнить методы решения")
        print("9. Выйти")

        choice = int(input("Выберите вариант: "))

        if choice == 1:
            filename = input("Введите имя файла: ")
            with open(filename, 'r') as file:
                lines = file.readlines()
                for line in lines:
                    name, weight, value = line.strip().split(',')
                    items.append(Item(name, int(weight), int(value)))

        elif choice == 2:
            name = input("Введите имя предмета: ")
            weight = int(input("Введите вес предмета: "))
            value = int(input("Введите ценность предмета: "))
            items.append(Item(name, weight, value))

        elif choice == 3:
            item_name = input("Введите имя предмета для изменения: ")
            for item in items:
                if item.name == item_name:
                    new_weight = int(input("Введите новый вес: "))
                    new_value = int(input("Введите новую ценность: "))
                    item.weight = new_weight
                    item.value = new_value
                    break
            else:
                print("Предмет не найден.")

        elif choice == 4:
            item_name = input("Введите имя предмета для удаления: ")
            for item in items:
                if item.name == item_name:
                    items.remove(item)
                    break
            else:
                print("Предмет не найден.")

        elif choice == 5:
            max_weight = int(input("Введите максимальный вес рюкзака: "))
            knapsack = Knapsack(max_weight)

        elif choice == 6:
            if knapsack:
                knapsack.display_contents()
            else:
                print("Рюкзак не создан.")

        elif choice == 7:
            if not knapsack:
                print("Сначала необходимо создать рюкзак.")
                continue

            print("Выберите метод решения:")
            print("1. Рекурсивный метод")
            print("2. Метод динамического программирования")
            print("3. Жадный метод по весу")
            print("4. Жадный метод по соотношению ценности/веса")
            method_choice = int(input("Выберите вариант: "))

            if method_choice == 1:
                value = knapsack_recursive(items, len(items), knapsack.max_weight)
                print(f"Максимальная ценность (рекурсивно): {value}")
            elif method_choice == 2:
                value = knapsack_dp(items, len(items), knapsack.max_weight)
                print(f"Максимальная ценность (динамическое программирование): {value}")
            elif method_choice == 3:
                knapsack_result = greedy_by_weight(items, knapsack.max_weight)
                knapsack_result.display_contents()
            elif method_choice == 4:
                knapsack_result = greedy_by_value_per_weight(items, knapsack.max_weight)
                knapsack_result.display_contents()
            else:
                print("Неверный вариант.")

        elif choice == 8:
            # Сравнение может быть реализовано по мере необходимости, это заглушка.
            print("Сравнение методов еще не реализовано.")

        elif choice == 9:
            print("Выход из программы.")
            break

        else:
            print("Неверный выбор.")


if __name__ == "__main__":
    main_menu()
